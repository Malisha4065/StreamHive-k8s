# Enable Istio sidecar injection for all services
apiVersion: v1
kind: Namespace
metadata:
  name: streamhive
  labels:
    istio-injection: enabled  # Automatically inject Istio sidecars

---
# Update service deployments with proper Istio labels
apiVersion: apps/v1
kind: Deployment
metadata:
  name: upload-service
  namespace: streamhive
  labels:
    app: upload-service
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: upload-service
      version: v1
  template:
    metadata:
      labels:
        app: upload-service
        version: v1
    spec:
      containers:
      - name: upload-service
        image: upload-service:latest
        imagePullPolicy: Never  # Use local images from minikube Docker daemon
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: LOG_LEVEL
          value: "info"
        - name: RABBITMQ_URL
          value: "amqp://guest:guest@rabbitmq.streamhive.svc.cluster.local:5672/"
        - name: AMQP_EXCHANGE
          value: "streamhive"
        - name: AZURE_STORAGE_ACCOUNT_NAME
          valueFrom:
            secretKeyRef:
              name: azure-storage-secrets
              key: AZURE_STORAGE_ACCOUNT_NAME
        - name: AZURE_STORAGE_ACCOUNT_KEY
          valueFrom:
            secretKeyRef:
              name: azure-storage-secrets
              key: AZURE_STORAGE_ACCOUNT_KEY
        - name: AZURE_STORAGE_RAW_CONTAINER
          valueFrom:
            configMapKeyRef:
              name: azure-storage-config
              key: AZURE_STORAGE_RAW_CONTAINER
        - name: AZURE_STORAGE_PROCESSED_CONTAINER
          valueFrom:
            configMapKeyRef:
              name: azure-storage-config
              key: AZURE_STORAGE_PROCESSED_CONTAINER
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: streamhive-secrets
              key: JWT_SECRET
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: upload-service
  namespace: streamhive
  labels:
    app: upload-service
spec:
  selector:
    app: upload-service
  ports:
  - name: http
    port: 80
    targetPort: 3001
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: video-catalog-service
  namespace: streamhive
  labels:
    app: video-catalog-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: video-catalog-service
      version: v1
  template:
    metadata:
      labels:
        app: video-catalog-service
        version: v1
    spec:
      containers:
      - name: video-catalog-service
        image: video-catalog-service:latest
        imagePullPolicy: Never  # Use local images from minikube Docker daemon
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: DB_HOST
          value: "postgres.streamhive.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "video_catalog"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "streamhive_dev_password"
        - name: DB_SSLMODE
          value: "disable"
        - name: LOG_LEVEL
          value: "info"
        - name: RABBITMQ_URL
          value: "amqp://guest:guest@rabbitmq.streamhive.svc.cluster.local:5672/"
        - name: AMQP_EXCHANGE
          value: "streamhive"
        - name: AMQP_QUEUE
          value: "video-catalog.video.uploaded"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: video-catalog-service
  namespace: streamhive
  labels:
    app: video-catalog-service
spec:
  selector:
    app: video-catalog-service
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: playback-service
  namespace: streamhive
  labels:
    app: playback-service
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: playback-service
      version: v1
  template:
    metadata:
      labels:
        app: playback-service
        version: v1
    spec:
      containers:
      - name: playback-service
        image: playback-service:latest
        imagePullPolicy: Never  # Use local images from minikube Docker daemon
        ports:
        - containerPort: 8090
          name: http
        env:
        - name: PORT
          value: "8090"
        - name: DB_HOST
          value: "postgres.streamhive.svc.cluster.local"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "video_catalog"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "streamhive_dev_password"
        - name: DB_SSLMODE
          value: "disable"
        - name: LOG_LEVEL
          value: "info"
        - name: AZURE_STORAGE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: azure-storage-secrets
              key: AZURE_STORAGE_ACCOUNT_NAME
        - name: AZURE_STORAGE_KEY
          valueFrom:
            secretKeyRef:
              name: azure-storage-secrets
              key: AZURE_STORAGE_ACCOUNT_KEY
        - name: AZURE_BLOB_CONTAINER
          valueFrom:
            configMapKeyRef:
              name: azure-storage-config
              key: AZURE_STORAGE_PROCESSED_CONTAINER
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: playback-service
  namespace: streamhive
  labels:
    app: playback-service
spec:
  selector:
    app: playback-service
  ports:
  - name: http
    port: 80
    targetPort: 8090
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: streamhive
  labels:
    app: frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
      version: v1
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: frontend-service:production-v3
        imagePullPolicy: Never  # Use local images from minikube Docker daemon
        ports:
        - containerPort: 80
          name: http
        env:
        - name: VITE_API_BASE
          value: "http://192.168.49.2:31381"  # Production Istio Gateway endpoint
        - name: VITE_API_UPLOAD
          value: "http://192.168.49.2:31381/api/v1/upload"
        - name: VITE_API_CATALOG
          value: "http://192.168.49.2:31381/api/v1"
        - name: VITE_API_PLAYBACK
          value: "http://192.168.49.2:31381/playback"
        - name: VITE_JWT
          value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyMTIzIiwidXNlcm5hbWUiOiJkZW1vIiwicGVybWlzc2lvbnMiOlsidXBsb2FkIiwidmlldyIsImNhdGFsb2ciXSwiaWF0IjoxNzU0ODM1ODIxLCJleHAiOjE3NTQ5MjIyMjF9.0t6woR9UYLo2fyPvqvOX7Bpme0QbdvibJVbT98cwKx8"

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: streamhive
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
